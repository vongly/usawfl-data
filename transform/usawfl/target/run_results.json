{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.9", "generated_at": "2025-09-21T23:58:34.237170Z", "invocation_id": "d0139400-5950-4961-aa3a-182268e0a4cd", "invocation_started_at": "2025-09-21T23:58:21.084495Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-21T23:58:22.432277Z", "completed_at": "2025-09-21T23:58:22.440227Z"}, {"name": "execute", "started_at": "2025-09-21T23:58:22.440717Z", "completed_at": "2025-09-21T23:58:22.586012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15581607818603516, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.usawfl.states", "compiled": true, "compiled_code": "select 'Alabama' as state, 'AL' as abbreviation\nunion\n    select 'Alaska' as state, 'AK' as abbreviation\nunion\n    select 'Arizona' as state, 'AZ' as abbreviation\nunion\n    select 'Arkansas' as state, 'AR' as abbreviation\nunion\n    select 'California' as state, 'CA' as abbreviation\nunion\n    select 'Colorado' as state, 'CO' as abbreviation\nunion\n    select 'Connecticut' as state, 'CT' as abbreviation\nunion\n    select 'Delaware' as state, 'DE' as abbreviation\nunion\n    select 'District of Columbia' as state, 'DC' as abbreviation\nunion\n    select 'Florida' as state, 'FL' as abbreviation\nunion\n    select 'Georgia' as state, 'GA' as abbreviation\nunion\n    select 'Hawaii' as state, 'HI' as abbreviation\nunion\n    select 'Idaho' as state, 'ID' as abbreviation\nunion\n    select 'Illinois' as state, 'IL' as abbreviation\nunion\n    select 'Indiana' as state, 'IN' as abbreviation\nunion\n    select 'Iowa' as state, 'IA' as abbreviation\nunion\n    select 'Kansas' as state, 'KS' as abbreviation\nunion\n    select 'Kentucky' as state, 'KY' as abbreviation\nunion\n    select 'Louisiana' as state, 'LA' as abbreviation\nunion\n    select 'Maine' as state, 'ME' as abbreviation\nunion\n    select 'Maryland' as state, 'MD' as abbreviation\nunion\n    select 'Massachusetts' as state, 'MA' as abbreviation\nunion\n    select 'Michigan' as state, 'MI' as abbreviation\nunion\n    select 'Minnesota' as state, 'MN' as abbreviation\nunion\n    select 'Mississippi' as state, 'MS' as abbreviation\nunion\n    select 'Missouri' as state, 'MO' as abbreviation\nunion\n    select 'Montana' as state, 'MT' as abbreviation\nunion\n    select 'Nebraska' as state, 'NE' as abbreviation\nunion\n    select 'Nevada' as state, 'NV' as abbreviation\nunion\n    select 'New Hampshire' as state, 'NH' as abbreviation\nunion\n    select 'New Jersey' as state, 'NJ' as abbreviation\nunion\n    select 'New Mexico' as state, 'NM' as abbreviation\nunion\n    select 'New York' as state, 'NY' as abbreviation\nunion\n    select 'North Carolina' as state, 'NC' as abbreviation\nunion\n    select 'North Dakota' as state, 'ND' as abbreviation\nunion\n    select 'Ohio' as state, 'OH' as abbreviation\nunion\n    select 'Oklahoma' as state, 'OK' as abbreviation\nunion\n    select 'Oregon' as state, 'OR' as abbreviation\nunion\n    select 'Pennsylvania' as state, 'PA' as abbreviation\nunion\n    select 'Rhode Island' as state, 'RI' as abbreviation\nunion\n    select 'South Carolina' as state, 'SC' as abbreviation\nunion\n    select 'South Dakota' as state, 'SD' as abbreviation\nunion\n    select 'Tennessee' as state, 'TN' as abbreviation\nunion\n    select 'Texas' as state, 'TX' as abbreviation\nunion\n    select 'Utah' as state, 'UT' as abbreviation\nunion\n    select 'Vermont' as state, 'VT' as abbreviation\nunion\n    select 'Virginia' as state, 'VA' as abbreviation\nunion\n    select 'Washington' as state, 'WA' as abbreviation\nunion\n    select 'West Virginia' as state, 'WV' as abbreviation\nunion\n    select 'Wisconsin' as state, 'WI' as abbreviation\nunion\n    select 'Wyoming' as state, 'WY' as abbreviation\nunion\n    select 'Samoa' as state, 'AS' as abbreviation\nunion\n    select 'Guam' as state, 'GU' as abbreviation\nunion\n    select 'Puerto Rico' as state, 'PR' as abbreviation\nunion\n    select 'Virgin Islands' as state, 'VI' as abbreviation", "relation_name": "memory.\"fct_references\".\"states\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-21T23:58:22.593368Z", "completed_at": "2025-09-21T23:58:22.599271Z"}, {"name": "execute", "started_at": "2025-09-21T23:58:22.599768Z", "completed_at": "2025-09-21T23:58:23.091241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.49958014488220215, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.usawfl.tournaments", "compiled": true, "compiled_code": "with stage as (\n    select\n        id,\n        nullif(owner_id, '') as owner_id,\n        nullif(year__c, '') as season,\n        nullif(name, '') as tournament_name,\n        split(location__c,', ')[1] as city,\n        split(location__c,', ')[2] as state,\n        cast(\n            strptime(year__c || ' ' || \n    split(\n        replace(\n            regexp_replace(\n                replace(\n                    replace(dates__c, ' and ', ' '),\n                    '-',\n                    ' '\n                ),\n                '([0-9])(st|nd|rd|th)',\n                '\\\\\\1',\n                'gi'\n            ),\n            '\\',\n            ''\n        ),\n        ' '\n    )\n[1] || ' ' || \n    split(\n        replace(\n            regexp_replace(\n                replace(\n                    replace(dates__c, ' and ', ' '),\n                    '-',\n                    ' '\n                ),\n                '([0-9])(st|nd|rd|th)',\n                '\\\\\\1',\n                'gi'\n            ),\n            '\\',\n            ''\n        ),\n        ' '\n    )\n[2], '%Y %B %d' )::date\n            as varchar\n        ) as start_date,\n        cast(\n            strptime(year__c || ' ' || \n    split(\n        replace(\n            regexp_replace(\n                replace(\n                    replace(dates__c, ' and ', ' '),\n                    '-',\n                    ' '\n                ),\n                '([0-9])(st|nd|rd|th)',\n                '\\\\\\1',\n                'gi'\n            ),\n            '\\',\n            ''\n        ),\n        ' '\n    )\n[1] || ' ' || \n    split(\n        replace(\n            regexp_replace(\n                replace(\n                    replace(dates__c, ' and ', ' '),\n                    '-',\n                    ' '\n                ),\n                '([0-9])(st|nd|rd|th)',\n                '\\\\\\1',\n                'gi'\n            ),\n            '\\',\n            ''\n        ),\n        ' '\n    )\n[3], '%Y %B %d' )::date\n            as varchar\n        ) as end_date,\n        cast(is_deleted as boolean) as is_deleted,\n        cast(created_date as timestamp) as created,\n        cast(_dlt_processed_utc as timestamp) as processed,\n        cast(system_modstamp as timestamp) as updated,\n        row_number() over(partition by id order by system_modstamp desc) as updated_order\n    from\n        's3://move-united/usawfl_salesforce_to_s3_file/raw_salesforce/usawfl_tournaments__c/*.parquet'\n    where\n        lower(is_deleted) = 'false'\n)\n\nselect\n    id,\n    owner_id,\n    season,\n    tournament_name,\n    city,\n    state,\n    start_date,\n    end_date,\n    created,\n    processed,\n    updated\nfrom\n    stage\nwhere\n    updated_order = 1", "relation_name": "memory.\"fct_salesforce\".\"tournaments\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-21T23:58:23.096548Z", "completed_at": "2025-09-21T23:58:23.112360Z"}, {"name": "execute", "started_at": "2025-09-21T23:58:23.112889Z", "completed_at": "2025-09-21T23:58:28.957708Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.863163948059082, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.usawfl.contacts", "compiled": true, "compiled_code": "with stage as (\n    select\n        c.id,\n        nullif(\n    case\n        when lower(left(c.last_name, 2)) = 'mc'\n        then concat(\n                upper(substring(c.last_name, 1, 1)),\n                lower(substring(c.last_name, 2, 1)),\n                upper(substring(c.last_name, 3, 1)),\n                lower(substring(c.last_name, 4, length(c.last_name)))\n            )\n        else concat(\n                upper(substring(c.last_name, 1, 1)),\n                lower(substring(c.last_name, 2, length(c.last_name)))\n            )\n        end\n, '') as last_name,\n        nullif(\n    case\n        when lower(left(c.first_name, 2)) = 'mc'\n        then concat(\n                upper(substring(c.first_name, 1, 1)),\n                lower(substring(c.first_name, 2, 1)),\n                upper(substring(c.first_name, 3, 1)),\n                lower(substring(c.first_name, 4, length(c.first_name)))\n            )\n        else concat(\n                upper(substring(c.first_name, 1, 1)),\n                lower(substring(c.first_name, 2, length(c.first_name)))\n            )\n        end\n, '') as first_name,\n        nullif(c.birthdate, '') as birthdate,\n        nullif(\n    right(regexp_replace(cast(c.phone as varchar), '[^0-9]', '', 'g'), 10)\n, '') as phone,\n        nullif(\n    right(regexp_replace(cast(c.mobile_phone as varchar), '[^0-9]', '', 'g'), 10)\n, '') as mobile_phone,\n        nullif(\n    right(regexp_replace(cast(c.home_phone as varchar), '[^0-9]', '', 'g'), 10)\n, '') as home_phone,\n        nullif(\n    right(regexp_replace(cast(c.work_phone__c as varchar), '[^0-9]', '', 'g'), 10)\n, '') as work_phone,\n        nullif(c.email, '') as email,\n        nullif(c.mailing_street, '') as street,\n        nullif(c.mailing_city, '') as city,\n        coalesce(sa.abbreviation, ss.abbreviation, nullif(c.mailing_state, '')) as state,\n        nullif(\n    right(regexp_replace(cast(c.mailing_postal_code as varchar), '[^0-9]', '', 'g'), 10)\n, '') as postal_code,\n        nullif(c.mailing_country, '') as country,\n        nullif(c.family_contact_name__c, '') as family_contact,\n        nullif(c.family_contact_phone__c, '') as family_contact_phone,\n        case\n            when c.warfighter__c = true\n                or c.warfighter_pre_2001_veteran__c = true \n                or c.warfighter_post_2001_veteran__c = true \n            then true\n            else false\n            end as warfighter,\n        nullif(c.shirt_size__c, '') as shirt_size,\n        cast(c.is_deleted as boolean) as is_deleted,\n        cast(c.created_date as timestamp) as created,\n        cast(c._dlt_processed_utc as timestamp) as processed,\n        cast(c.system_modstamp as timestamp) as updated,\n        row_number() over(partition by c.id order by c.system_modstamp desc) as updated_order\n    from\n        read_parquet('s3://move-united/usawfl_salesforce_to_s3_file/raw_salesforce/contact/*.parquet') c\n\n    left join\n        memory.\"fct_references\".\"states\" sa\n    on\n        lower(\n    regexp_replace(c.mailing_state, '[\\.`]', '', 'g')\n) = lower(sa.abbreviation)\n\n    left join\n        memory.\"fct_references\".\"states\" ss\n    on\n        lower(\n    regexp_replace(c.mailing_state, '[\\.`]', '', 'g')\n) = lower(ss.state)\n\n    where\n        lower(c.is_deleted) = 'false'\n)\n\nselect\n    id,\n    last_name,\n    first_name,\n    birthdate,\n    \n    if(\n        cast(phone as varchar) is null,\n        null,\n        '(' || substring(cast(phone as varchar) from 1 for 3) || ') ' || substring(cast(phone as varchar) from 3 for 3) || '-' || substring(cast(phone as varchar) from 7 for 4)\n    )\n as phone,\n    \n    if(\n        cast(mobile_phone as varchar) is null,\n        null,\n        '(' || substring(cast(mobile_phone as varchar) from 1 for 3) || ') ' || substring(cast(mobile_phone as varchar) from 3 for 3) || '-' || substring(cast(mobile_phone as varchar) from 7 for 4)\n    )\n as mobile_phone,\n    \n    if(\n        cast(home_phone as varchar) is null,\n        null,\n        '(' || substring(cast(home_phone as varchar) from 1 for 3) || ') ' || substring(cast(home_phone as varchar) from 3 for 3) || '-' || substring(cast(home_phone as varchar) from 7 for 4)\n    )\n as home_phone,\n    \n    if(\n        cast(work_phone as varchar) is null,\n        null,\n        '(' || substring(cast(work_phone as varchar) from 1 for 3) || ') ' || substring(cast(work_phone as varchar) from 3 for 3) || '-' || substring(cast(work_phone as varchar) from 7 for 4)\n    )\n as work_phone,\n    email,\n    street,\n    city,\n    \n    case\n        when right(state, 4) = ', UK'\n        then replace(state, ', UK', '')\n        when right(state, 3) = '/UK'\n        then replace(state, '/UK', '')\n        when right(state, 8) = ', Canada'\n        then replace(state, ', Canada', '')\n        when state in ('S\u00c3\u00a3o Paulo', 'S\u00e3o Paulo')\n        then 'Sao Paulo'\n        else state\n        end\n as state,\n    \n    case\n        when length(cast(postal_code as varchar)) = 5\n        then cast(postal_code as varchar)\n        when length(cast(postal_code as varchar)) < 5\n        then right('0000' || cast(postal_code as varchar), 5)\n        when length(cast(postal_code as varchar)) > 5\n        then left(right('0000' || cast(postal_code as varchar), 9), 5)\n        end\n as postal_code,\n    \n    case\n        when replace(lower(country), '.', '') in ('united states of america', 'united states', 'usa', 'us', 'usaa')\n        then 'United States'\n        when lower(country) = 'uk'\n        then 'United Kingdom'\n        when right(state, 4) = ', UK'\n        then 'United Kingdom'\n        when right(state, 3) = '/UK'\n        then 'United Kingdom'\n        when right(state, 8) = ', Canada'\n        then 'Canada'\n        when lower(country) = 'can'\n        then 'Canada'\n        when lower(country) = 'mex'\n        then 'Mexico'\n        when lower(country) = 'per'\n        then 'Peru'\n        when lower(country) in ('france', 'fra')\n        then 'France'\n        when state in ('S\u00c3\u00a3o Paulo', 'S\u00e3o Paulo')\n        then 'Brazil'\n        else country\n        end\n as country,\n    family_contact,\n    family_contact_phone,\n    warfighter,\n    shirt_size,\n    created,\n    processed,\n    updated\nfrom\n    stage\nwhere\n    updated_order = 1", "relation_name": "memory.\"fct_salesforce\".\"contacts\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-21T23:58:28.963069Z", "completed_at": "2025-09-21T23:58:28.969706Z"}, {"name": "execute", "started_at": "2025-09-21T23:58:28.970248Z", "completed_at": "2025-09-21T23:58:29.919424Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9582810401916504, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.usawfl.officials", "compiled": true, "compiled_code": "with official_links_stage as (\n    select\n        ol.official__c as official_id,\n        cast(ol.is_deleted as boolean) as is_deleted,\n        nullif(t.tournament_name, '') as tournament_name,\n        nullif(ol.games_officiated__c, '') as games_officiated,\n        nullif(ol.days_assigned__c, '') as days_assigned,\n        row_number() over(partition by ol.id order by ol.system_modstamp desc) as updated_order\n    from \n        's3://move-united/usawfl_salesforce_to_s3_file/raw_salesforce/usawfl_official_link__c/*.parquet' ol\n    left join\n        memory.\"fct_salesforce\".\"tournaments\" t\n    on\n        ol.usawfl_tournament__c = t.id\n    where\n        ol.is_deleted = false\n\n),\n\nofficial_links as (\n    select\n        official_id,\n        json_group_array(\n            json_object(\n                'tournament_name', tournament_name,\n                'games_officiated', games_officiated,\n                'days_assigned', days_assigned\n            )\n        ) as tournament_officiated_details\n    from\n        official_links_stage\n    where\n        updated_order = 1\n    group by\n        1\n),\n\nofficials_stage as (\n    select\n        o.id,\n        nullif(o.name, '') as name,\n        nullif(o.type_of_official__c, '') as type,\n        o.status__c as status,\n        string_split(\n            replace(replace(o.field_position_preferences__c, ';', '|'), '/', '|'),\n            '|'\n        ) as preference,\n        nullif(o.type_of_official_details__c, '') as details,\n        nullif(o.safe_sport_course_completed__c, '') as safe_sport_course_completed,\n        nullif(o.safe_sport_certificate_expires__c, '') as safe_sport_certificate_expires,\n        nullif(o.background_check_determination__c, '') as background_check_determination,\n        nullif(o.background_check_expires__c, '') as background_check_expires,\n        nullif(o.usawfl_rules_exam_pass_date__c, '') as usawfl_rules_exam_pass_date,\n        cast(o.is_deleted as boolean) as is_deleted,\n        if(c.id is null, false, true) as has_contact,\n        nullif(c.first_name, '') as first_name,\n        nullif(c.last_name, '') as last_name,\n        nullif(c.phone, '') as phone,\n        nullif(c.mobile_phone, '') as mobile_phone,\n        nullif(c.home_phone, '') as home_phone,\n        nullif(c.work_phone, '') as work_phone,\n        nullif(c.email, '') as email,\n        nullif(c.street, '') as street,\n        nullif(c.city, '') as city,\n        nullif(c.state, '') as state,\n        nullif(c.postal_code, '') as postal_code,\n        nullif(c.country, '') as country,\n--        nullif(ol.tournament_officiated_details, '') as tournament_officiated_details,\n        cast(o.created_date as timestamp) as created,\n        cast(o._dlt_processed_utc as timestamp) as processed,\n        cast(o.system_modstamp as timestamp) as updated,\n        row_number() over(partition by o.id order by o.system_modstamp desc) as updated_order,\n        row_number() over(partition by o.contact__c order by o.system_modstamp desc) as contact_updated_order,\n    from\n        's3://move-united/usawfl_salesforce_to_s3_file/raw_salesforce/usawfl_officials__c/*.parquet' o\n\n    left join\n        memory.\"fct_salesforce\".\"contacts\" c\n    on\n        o.contact__c = c.id\n\n    left join\n        official_links ol\n    on\n        o.id = ol.official_id\n\n    where\n        lower(o.is_deleted) = 'false'\n        and o.name != 'Test Official'\n)\n\n\nselect\n    id,\n    name,\n    type,\n    status,\n    preference,\n    details,\n    has_contact,\n    first_name,\n    last_name,        \n    phone,\n    mobile_phone,\n    home_phone,\n    work_phone,\n    email,\n    street,\n    city,\n    state,\n    postal_code,\n    country,\n    safe_sport_course_completed,\n    safe_sport_certificate_expires,\n    background_check_determination,\n    background_check_expires,\n    usawfl_rules_exam_pass_date,\n--    tournament_officiated_details\n    created,\n    processed,\n    updated\nfrom\n    officials_stage\nwhere\n    updated_order = 1\n    and contact_updated_order = 1", "relation_name": "memory.\"fct_salesforce\".\"officials\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-21T23:58:29.925889Z", "completed_at": "2025-09-21T23:58:29.930053Z"}, {"name": "execute", "started_at": "2025-09-21T23:58:29.930562Z", "completed_at": "2025-09-21T23:58:30.419662Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4956390857696533, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.usawfl.teams", "compiled": true, "compiled_code": "with stage as (\n    select\n        t.id,\n        nullif(t.name, '') as team_name,\n        cast(t.is_deleted as boolean) as is_deleted,\n        if(c1.id is null, false, true) as has_primary_contact,\n        nullif(c1.first_name, '') as primary_contact_first_name,\n        nullif(c1.last_name, '') as primary_contact_last_name,\n        nullif(c1.phone, '') as primary_contact_phone,\n        nullif(c1.mobile_phone, '') as primary_contact_mobile_phone,\n        nullif(c1.home_phone, '') as primary_contact_home_phone,\n        nullif(c1.work_phone, '') as primary_contact_work_phone,\n        nullif(c1.email, '') as primary_contact_email,\n        nullif(c1.street, '') as primary_contact_street,\n        nullif(c1.city, '') as primary_contact_city,\n        nullif(c1.state, '') as primary_contact_state,\n        nullif(c1.postal_code, '') as primary_contact_postal_code,\n        nullif(c1.country, '') as primary_contact_country,\n        cast(t.created_date as timestamp) as created,\n        cast(t._dlt_processed_utc as timestamp) as processed,\n        cast(t.system_modstamp as timestamp) as updated,\n        row_number() over(partition by t.id order by t.system_modstamp desc) as updated_order,\n    from\n        's3://move-united/usawfl_salesforce_to_s3_file/raw_salesforce/usawfl_team__c/*.parquet' t\n\n    left join\n        memory.\"fct_salesforce\".\"contacts\" c1\n    on\n        t.primary_contact__c = c1.id\n)\n\nselect\n    id,\n    team_name,\n    has_primary_contact,\n    primary_contact_first_name,\n    primary_contact_last_name,        \n    primary_contact_phone,\n    primary_contact_mobile_phone,\n    primary_contact_home_phone,\n    primary_contact_work_phone,\n    primary_contact_email,\n    primary_contact_street,\n    primary_contact_city,\n    primary_contact_state,\n    primary_contact_postal_code,\n    primary_contact_country,\n    created,\n    processed,\n    updated\nfrom\n    stage\nwhere\n    updated_order = 1", "relation_name": "memory.\"fct_salesforce\".\"teams\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-21T23:58:30.424720Z", "completed_at": "2025-09-21T23:58:30.428938Z"}, {"name": "execute", "started_at": "2025-09-21T23:58:30.429418Z", "completed_at": "2025-09-21T23:58:32.258362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8354530334472656, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.usawfl.members", "compiled": true, "compiled_code": "with stage as (\n    select\n        m.id,\n        nullif(m.name, '') as name,\n        nullif(t.team_name, '') as team_name,\n        nullif(m.contact_type__c, '') as contact_type,\n        nullif(m.contact_subtype__c, '') as contact_subtype,\n        nullif(m.type__c, '') as type,\n        nullif(m.status__c, '') as status,\n        nullif(m.classification_proposed__c, '') as classification_proposed,\n        nullif(m.classification_proposed_year__c, '') as classification_proposed_year,\n        nullif(m.classification_confirmed__c, '') as classification,\n        nullif(m.classification_status_final__c, '') as classification_status,\n        nullif(m.classification_confirmed_tournament__c, '') as classification_updated_at,\n        nullif(m.classification_medical_team__c, '') as classifiers,\n        nullif(m.safe_sport_certified__c, '') as safe_sport_certified,\n        nullif(m.rules_exam_passed__c, '') as rules_exam_passed,\n        cast(m.is_deleted as boolean) as is_deleted,\n        if(c.id is null, false, true) as has_contact,\n        nullif(c.first_name, '') as first_name,\n        nullif(c.last_name, '') as last_name,\n        nullif(c.phone, '') as phone,\n        nullif(c.mobile_phone, '') as mobile_phone,\n        nullif(c.home_phone, '') as home_phone,\n        nullif(c.work_phone, '') as work_phone,\n        nullif(c.email, '') as email,\n        nullif(c.street, '') as street,\n        nullif(c.city, '') as city,\n        nullif(c.state, '') as state,\n        nullif(c.postal_code, '') as postal_code,\n        nullif(c.country, '') as country,\n        cast(m.created_date as timestamp) as created,\n        cast(m._dlt_processed_utc as timestamp) as processed,\n        cast(m.system_modstamp as timestamp) as updated,\n        row_number() over(partition by m.id order by m.system_modstamp desc) as updated_order,\n        row_number() over(partition by m.contact__c order by m.system_modstamp desc) as contact_updated_order\n    from\n        's3://move-united/usawfl_salesforce_to_s3_file/raw_salesforce/usawfl__c/*.parquet' m\n\n    left join\n        memory.\"fct_salesforce\".\"contacts\" c\n    on\n        m.contact__c = c.id\n\n    left join\n        memory.\"fct_salesforce\".\"teams\" t\n    on\n        m.team__c = t.id\n\n    where\n        lower(m.is_deleted) = 'false'\n)\n\nselect\n    id,\n    name,\n    team_name,\n    contact_type,\n    contact_subtype,\n    type,\n    status,\n    classification_proposed,\n    classification_proposed_year,\n    classification,\n    classification_status,\n    classification_updated_at,\n    classifiers,\n    safe_sport_certified,\n    rules_exam_passed,\n    has_contact,\n    first_name,\n    last_name,        \n    phone,\n    mobile_phone,\n    home_phone,\n    work_phone,\n    email,\n    street,\n    city,\n    state,\n    postal_code,\n    country,\n    created,\n    processed,\n    updated\nfrom\n    stage\nwhere\n    updated_order = 1\n    and contact_updated_order = 1", "relation_name": "memory.\"fct_salesforce\".\"members\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-21T23:58:32.264185Z", "completed_at": "2025-09-21T23:58:32.270309Z"}, {"name": "execute", "started_at": "2025-09-21T23:58:32.270878Z", "completed_at": "2025-09-21T23:58:34.224797Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.96254301071167, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.usawfl.stats", "compiled": true, "compiled_code": "with members as (\n    select\n        m.*,\n        nullif(c.last_name, '') as last_name,\n        nullif(c.first_name, '') as first_name,\n        nullif(t.team_name, '') as team_name,\n        row_number() over(partition by m.id order by m.system_modstamp desc) as updated_order\n    from\n        's3://move-united/usawfl_salesforce_to_s3_file/raw_salesforce/usawfl__c/*.parquet' m\n\n    left join\n        memory.\"fct_salesforce\".\"teams\" t\n    on\n        m.team__c = t.id\n\n    left join\n        memory.\"fct_salesforce\".\"contacts\" c\n    on\n        m.contact__c = c.id\n\n    where\n        lower(m.is_deleted) = 'false'\n),\n\nstage as (\n    select * from members where updated_order = 1\n),\n\nstats as (\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2021_t_ds__c',\n                substring('x2021_t_ds__c' from 1 for strpos('x2021_t_ds__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2021_t_ds__c as int) as amount,\n        cast(substring('x2021_t_ds__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2021_t_ds__c != ''\n\n    \n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2021_in_ts__c',\n                substring('x2021_in_ts__c' from 1 for strpos('x2021_in_ts__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2021_in_ts__c as int),\n        cast(substring('x2021_in_ts__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2021_in_ts__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2021_sacks__c',\n                substring('x2021_sacks__c' from 1 for strpos('x2021_sacks__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2021_sacks__c as int),\n        cast(substring('x2021_sacks__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2021_sacks__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2022_safeties__c',\n                substring('x2022_safeties__c' from 1 for strpos('x2022_safeties__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2022_safeties__c as int),\n        cast(substring('x2022_safeties__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2022_safeties__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2022_in_ts__c',\n                substring('x2022_in_ts__c' from 1 for strpos('x2022_in_ts__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2022_in_ts__c as int),\n        cast(substring('x2022_in_ts__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2022_in_ts__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2022_sacks__c',\n                substring('x2022_sacks__c' from 1 for strpos('x2022_sacks__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2022_sacks__c as int),\n        cast(substring('x2022_sacks__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2022_sacks__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2022_t_ds__c',\n                substring('x2022_t_ds__c' from 1 for strpos('x2022_t_ds__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2022_t_ds__c as int),\n        cast(substring('x2022_t_ds__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2022_t_ds__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2023_safeties__c',\n                substring('x2023_safeties__c' from 1 for strpos('x2023_safeties__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2023_safeties__c as int),\n        cast(substring('x2023_safeties__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2023_safeties__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2023_in_ts__c',\n                substring('x2023_in_ts__c' from 1 for strpos('x2023_in_ts__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2023_in_ts__c as int),\n        cast(substring('x2023_in_ts__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2023_in_ts__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2023_sacks__c',\n                substring('x2023_sacks__c' from 1 for strpos('x2023_sacks__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2023_sacks__c as int),\n        cast(substring('x2023_sacks__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2023_sacks__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2023_t_ds__c',\n                substring('x2023_t_ds__c' from 1 for strpos('x2023_t_ds__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2023_t_ds__c as int),\n        cast(substring('x2023_t_ds__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2023_t_ds__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2024_safeties__c',\n                substring('x2024_safeties__c' from 1 for strpos('x2024_safeties__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2024_safeties__c as int),\n        cast(substring('x2024_safeties__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2024_safeties__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2024_in_ts__c',\n                substring('x2024_in_ts__c' from 1 for strpos('x2024_in_ts__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2024_in_ts__c as int),\n        cast(substring('x2024_in_ts__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2024_in_ts__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2024_sacks__c',\n                substring('x2024_sacks__c' from 1 for strpos('x2024_sacks__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2024_sacks__c as int),\n        cast(substring('x2024_sacks__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2024_sacks__c != ''\n\n        \n    \n        \n\n    union all\n\n    select\n        id,\n        last_name,\n        first_name,\n        name,\n        team_name,\n        replace(\n            replace(\n                'x2024_t_ds__c',\n                substring('x2024_t_ds__c' from 1 for strpos('x2024_t_ds__c','_')),\n                ''\n            ),\n            '__c',\n            ''\n        ) as stat,\n        cast(x2024_t_ds__c as int),\n        cast(substring('x2024_t_ds__c' from 2 for 4) as int) as year\n    from\n        stage\n    where\n        lower(is_deleted) = 'false'\n        and x2024_t_ds__c != ''\n\n        \n    \n)\n\nselect\n    last_name,\n    first_name,\n    team_name,\n    case\n        when right(stat, 1) = 's'\n        then left(replace(stat, '_', ''), len(replace(stat, '_', '')) - 1 )\n        else replace(stat, '_', '')\n        end as stat,\n    amount,\n    year\nfrom\n    stats", "relation_name": "memory.\"fct_salesforce\".\"stats\"", "batch_results": null}], "elapsed_time": 12.065209150314331, "args": {"log_level": "info", "require_nested_cumulative_type_params": false, "state_modified_compare_vars": false, "invocation_command": "dbt run", "state_modified_compare_more_unrendered_values": false, "vars": {}, "empty": false, "static_parser": true, "partial_parse": true, "upload_to_artifacts_ingest_api": false, "partial_parse_file_diff": true, "log_level_file": "debug", "require_all_warnings_handled_by_warn_error": false, "require_explicit_package_overrides_for_builtin_materializations": true, "which": "run", "macro_debugging": false, "show_all_deprecations": false, "log_path": "/Users/vongly/dev/freelance/MoveUnited/usawfl/transform/usawfl/logs", "defer": false, "cache_selected_only": false, "print": true, "log_format_file": "debug", "skip_nodes_if_on_run_start_fails": false, "printer_width": 80, "use_fast_test_edges": false, "send_anonymous_usage_stats": true, "validate_macro_args": false, "strict_mode": false, "version_check": true, "require_batched_execution_for_custom_microbatch_strategy": false, "exclude": [], "introspect": true, "indirect_selection": "eager", "use_colors": true, "quiet": false, "select": [], "write_json": true, "require_yaml_configuration_for_mf_time_spines": false, "project_dir": "/Users/vongly/dev/freelance/MoveUnited/usawfl/transform/usawfl", "log_format": "default", "require_resource_names_without_spaces": true, "show_resource_report": false, "populate_cache": true, "source_freshness_run_project_hooks": true, "profiles_dir": "/Users/vongly/dev/freelance/MoveUnited/usawfl/transform/usawfl", "warn_error_options": {"error": [], "warn": [], "silence": []}, "use_colors_file": true, "require_generic_test_arguments_property": true, "favor_state": false, "log_file_max_bytes": 10485760}}